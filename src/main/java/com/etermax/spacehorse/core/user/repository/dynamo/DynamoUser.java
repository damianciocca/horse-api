package com.etermax.spacehorse.core.user.repository.dynamo;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.etermax.spacehorse.core.authenticator.model.Role;
import com.etermax.spacehorse.core.common.repository.dynamo.AbstractDynamoDAO;
import com.etermax.spacehorse.core.user.model.Platform;
import com.etermax.spacehorse.core.user.model.User;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;

import java.util.Date;
import java.util.List;

@DynamoDBTable(tableName = "user")
public class DynamoUser implements AbstractDynamoDAO {

    @DynamoDBHashKey(attributeName = "userId")
    private String userId;

    @DynamoDBAttribute(attributeName = "password")
    private String password;

    @DynamoDBAttribute(attributeName = "passwords")
    private List<String> passwords;

    @DynamoDBTypeConvertedEnum
    @DynamoDBAttribute(attributeName = "role")
    private Role role;

    @DynamoDBAttribute(attributeName = "sessionToken")
    private String sessionToken;

    @DynamoDBTypeConvertedEnum
    @DynamoDBAttribute(attributeName = "platform")
    private Platform platform;

    @DynamoDBAutoGeneratedTimestamp(strategy=DynamoDBAutoGenerateStrategy.CREATE)
    private Date createdDate;

    @DynamoDBAutoGeneratedTimestamp(strategy=DynamoDBAutoGenerateStrategy.ALWAYS)
    private Date lastUpdatedDate;

    public DynamoUser() {
    }

    public DynamoUser(String userId, Role role, String sessionToken, String password, List<String> passwords, Platform platform) {
        this.userId = userId;
        this.role = role;
        this.sessionToken = sessionToken;
        this.password = password;
        this.passwords = passwords;
        this.platform = platform;
    }

    public static DynamoUser createFromUser(User user) {
        Role role = user.getRole();
        String userId = user.getUserId();
        String sessionToken = user.getSessionToken();
        String password = user.getPassword();
        List<String> passwords = user.getPasswords();
        Platform platform = user.getPlatform();
        DynamoUser dynamoUser = new DynamoUser(userId, role, sessionToken, password, passwords, platform);
        if (user.getCreatedDate() != null) {
            dynamoUser.setCreatedDate(user.getCreatedDate());
        }
        return dynamoUser;
    }

    public static User mapFromDynamoUserToUser(DynamoUser dynamoUser) {
        String userId = dynamoUser.getUserId();
        String password = dynamoUser.getPassword();
        List<String> passwords = dynamoUser.getPasswords();
        Role role = dynamoUser.getRole();
        Platform platform = dynamoUser.getPlatform();
        User user = new User(true, userId, password, passwords, role, platform);
        user.setSessionToken(dynamoUser.getSessionToken());
        user.setCreatedDate(dynamoUser.getCreatedDate());
        user.setLastUpdatedDate(dynamoUser.getLastUpdatedDate());
        return user;
    }

    public Platform getPlatform() {
        return platform;
    }

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public Role getRole() {
        return role;
    }

    public void setRole(Role role) {
        this.role = role;
    }

    public String getSessionToken() {
        return sessionToken;
    }

    public void setSessionToken(String sessionToken) {
        this.sessionToken = sessionToken;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public void setPlatform(Platform platform) {
        this.platform = platform;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        return new EqualsBuilder().append(userId, ((DynamoUser) o).userId).isEquals();
    }

    @Override
    public int hashCode() {
        return new HashCodeBuilder(17, 37).append(userId).toHashCode();
    }

    @Override
    public void setId(String id) {
        setUserId(id);
    }

    @Override
    public String getId() {
        return getUserId();
    }

    public List<String> getPasswords() {
        return passwords;
    }

    public void setPasswords(List<String> passwords) {
        this.passwords = passwords;
    }

    public Date getCreatedDate() {
        return createdDate;
    }

    public void setCreatedDate(Date createdDate) {
        this.createdDate = createdDate;
    }

    public Date getLastUpdatedDate() {
        return lastUpdatedDate;
    }

    public void setLastUpdatedDate(Date lastUpdatedDate) {
        this.lastUpdatedDate = lastUpdatedDate;
    }

}